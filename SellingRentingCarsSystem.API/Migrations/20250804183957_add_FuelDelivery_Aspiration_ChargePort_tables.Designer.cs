// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SellingRentingCarsSystem.API.Data;

#nullable disable

namespace SellingRentingCarsSystem.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250804183957_add_FuelDelivery_Aspiration_ChargePort_tables")]
    partial class add_FuelDelivery_Aspiration_ChargePort_tables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Aspiration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("Aspirations", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.BodyType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DoorCount")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TypeName", "DoorCount")
                        .IsUnique();

                    b.ToTable("BodyTypes", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Booking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Canceled")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExpectedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("VehicleID");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.ChargePort", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PortName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PortName")
                        .IsUnique();

                    b.ToTable("ChargePorts", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NID")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Feature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureName", "Category")
                        .IsUnique();

                    b.ToTable("Features", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.FuelDelivery", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("FuelDeliveries", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.FuelType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("FuelTypes", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Caption")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("SizeInBytes")
                        .HasColumnType("int");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ImageName")
                        .IsUnique();

                    b.HasIndex("VehicleID");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Maintenance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("DoneAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentID")
                        .IsUnique();

                    b.HasIndex("VehicleID");

                    b.ToTable("Maintenances", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Make", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MakeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("MakeName", "CountryOfOrigin")
                        .IsUnique();

                    b.ToTable("Makes", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Model", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MakeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductionYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MakeID");

                    b.ToTable("Models", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateOfPay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PayType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Receive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.PowerTrain", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AspirationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("BatteryCapacityKWh")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ChargePortID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("CombinedRangeMiles")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Cylinders")
                        .HasColumnType("int");

                    b.Property<decimal?>("ElectricOnlyRangeMiles")
                        .HasColumnType("decimal(18,2)");

                    b.Property<float?>("EngineSize")
                        .HasColumnType("real");

                    b.Property<string>("FuelDeliveryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FuelTypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<string>("PowerTrainType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("RangeMiles")
                        .HasColumnType("int");

                    b.Property<decimal>("Torque")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AspirationID");

                    b.HasIndex("ChargePortID");

                    b.HasIndex("FuelDeliveryID");

                    b.HasIndex("FuelTypeID");

                    b.HasIndex("HashCode")
                        .IsUnique();

                    b.ToTable("PowerTrains", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.RentVehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ActualEndRentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("DamageAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DamageDescription")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("EndAtMile")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpectedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpectedEndRentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PayLater")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StartAtMile")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartRentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PaymentID")
                        .IsUnique()
                        .HasFilter("[PaymentID] IS NOT NULL");

                    b.HasIndex("VehicleID");

                    b.ToTable("RentVehicles", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.SellVehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SellDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PaymentID")
                        .IsUnique();

                    b.HasIndex("VehicleID")
                        .IsUnique();

                    b.ToTable("SellVehicles", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.TransmissionType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("TransmissionTypes", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BodyTypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExteriorColor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InteriorColor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModelID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("int");

                    b.Property<string>("PowerTrainID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransmissionTypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("VehiclePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehicleStatus")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BodyTypeID");

                    b.HasIndex("ModelID");

                    b.HasIndex("PowerTrainID");

                    b.HasIndex("TransmissionTypeID");

                    b.HasIndex("VIN");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.VehicleFeature", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FeatureID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsStandard")
                        .HasColumnType("bit");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureID");

                    b.HasIndex("VehicleID");

                    b.ToTable("VehicleFeatures", (string)null);
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.VehicleTags", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TagID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VehicleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("TagID");

                    b.HasIndex("VehicleID");

                    b.ToTable("VehileTags");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "9a0d8d62-fad1-4803-b768-5d22153fd11c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6c081f7-b116-45b5-af15-4c4f86ced16f",
                            Email = "admin.01@teml.net",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN.01@TEML.NET",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIJPaldMC5gbqGlIIsVS4XoImsbip88MJgopDPzSpi+ATS94zZd6CX6SunupSvu4Tw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A180686382BE42DDA62A4DAE3CA4C96D",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Booking", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.Customer", "Customer")
                        .WithMany("Booking")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.Vehicle", "Vehicle")
                        .WithMany("Booking")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Image", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.Vehicle", "Vehicle")
                        .WithMany("Images")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Maintenance", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.Payment", "Payment")
                        .WithOne("Maintenance")
                        .HasForeignKey("SellingRentingCarsSystem.API.Models.Maintenance", "PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.Vehicle", "Vehicle")
                        .WithMany("Maintenances")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Model", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.Make", "Make")
                        .WithMany("Models")
                        .HasForeignKey("MakeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Make");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.PowerTrain", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.Aspiration", "Aspiration")
                        .WithMany("PowerTrains")
                        .HasForeignKey("AspirationID");

                    b.HasOne("SellingRentingCarsSystem.API.Models.ChargePort", "ChargePort")
                        .WithMany("PowerTrains")
                        .HasForeignKey("ChargePortID");

                    b.HasOne("SellingRentingCarsSystem.API.Models.FuelDelivery", "FuelDelivery")
                        .WithMany("PowerTrains")
                        .HasForeignKey("FuelDeliveryID");

                    b.HasOne("SellingRentingCarsSystem.API.Models.FuelType", "FuleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("FuelTypeID");

                    b.Navigation("Aspiration");

                    b.Navigation("ChargePort");

                    b.Navigation("FuelDelivery");

                    b.Navigation("FuleType");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.RentVehicle", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.Customer", "Customer")
                        .WithMany("RentVehicle")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.Payment", "Payment")
                        .WithOne("RentVehicle")
                        .HasForeignKey("SellingRentingCarsSystem.API.Models.RentVehicle", "PaymentID");

                    b.HasOne("SellingRentingCarsSystem.API.Models.Vehicle", "Vehicle")
                        .WithMany("RentVehicles")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.SellVehicle", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.Customer", "Customer")
                        .WithMany("SellVehicle")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.Payment", "Payment")
                        .WithOne("SellVehicle")
                        .HasForeignKey("SellingRentingCarsSystem.API.Models.SellVehicle", "PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.Vehicle", "Vehicle")
                        .WithOne("SellVehicle")
                        .HasForeignKey("SellingRentingCarsSystem.API.Models.SellVehicle", "VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Vehicle", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.BodyType", "BodyType")
                        .WithMany("Vehicles")
                        .HasForeignKey("BodyTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.Model", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.PowerTrain", "PowerTrain")
                        .WithMany("Vehicles")
                        .HasForeignKey("PowerTrainID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.TransmissionType", "TransmissionType")
                        .WithMany("Vehicles")
                        .HasForeignKey("TransmissionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BodyType");

                    b.Navigation("Model");

                    b.Navigation("PowerTrain");

                    b.Navigation("TransmissionType");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.VehicleFeature", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.Feature", "Feature")
                        .WithMany("VehicleFeatures")
                        .HasForeignKey("FeatureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleFeatures")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.VehicleTags", b =>
                {
                    b.HasOne("SellingRentingCarsSystem.API.Models.Tag", "Tag")
                        .WithMany("VehileTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SellingRentingCarsSystem.API.Models.Vehicle", "Vehicle")
                        .WithMany("VehileTags")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.ApplicationUser", b =>
                {
                    b.OwnsMany("SellingRentingCarsSystem.API.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RefreshTokens", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Aspiration", b =>
                {
                    b.Navigation("PowerTrains");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.BodyType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.ChargePort", b =>
                {
                    b.Navigation("PowerTrains");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Customer", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("RentVehicle");

                    b.Navigation("SellVehicle");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Feature", b =>
                {
                    b.Navigation("VehicleFeatures");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.FuelDelivery", b =>
                {
                    b.Navigation("PowerTrains");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.FuelType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Make", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Model", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Payment", b =>
                {
                    b.Navigation("Maintenance");

                    b.Navigation("RentVehicle");

                    b.Navigation("SellVehicle");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.PowerTrain", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Tag", b =>
                {
                    b.Navigation("VehileTags");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.TransmissionType", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SellingRentingCarsSystem.API.Models.Vehicle", b =>
                {
                    b.Navigation("Booking");

                    b.Navigation("Images");

                    b.Navigation("Maintenances");

                    b.Navigation("RentVehicles");

                    b.Navigation("SellVehicle");

                    b.Navigation("VehicleFeatures");

                    b.Navigation("VehileTags");
                });
#pragma warning restore 612, 618
        }
    }
}
